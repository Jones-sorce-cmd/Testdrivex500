mport RPi.GPIO as GPIO
import time

# Define GPIO pins for the motors
motor1_a = 17
motor1_b = 18
motor2_a = 22
motor2_b = 23

# Define GPIO pins for the distance sensor
trigger_pin = 24
echo_pin = 25

# Set up GPIO
GPIO.setmode(GPIO.BCM)
GPIO.setup(motor1_a, GPIO.OUT)
GPIO.setup(motor1_b, GPIO.OUT)
GPIO.setup(motor2_a, GPIO.OUT)
GPIO.setup(motor2_b, GPIO.OUT)
GPIO.setup(trigger_pin, GPIO.OUT)
GPIO.setup(echo_pin, GPIO.IN)

# Function to move the robot forward
def forward():
    GPIO.output(motor1_a, GPIO.HIGH)
    GPIO.output(motor1_b, GPIO.LOW)
    GPIO.output(motor2_a, GPIO.HIGH)
    GPIO.output(motor2_b, GPIO.LOW)

# Function to stop the robot
def stop():
    GPIO.output(motor1_a, GPIO.LOW)
    GPIO.output(motor1_b, GPIO.LOW)
    GPIO.output(motor2_a, GPIO.LOW)
    GPIO.output(motor2_b, GPIO.LOW)

# Function to measure distance with the ultrasonic sensor
def measure_distance():
    GPIO.output(trigger_pin, GPIO.HIGH)
    time.sleep(0.00001)
    GPIO.output(trigger_pin, GPIO.LOW)
    
    while GPIO.input(echo_pin) == 0:
        pulse_start = time.time()
    
    while GPIO.input(echo_pin) == 1:
        pulse_end = time.time()
    
    pulse_duration = pulse_end - pulse_start
    distance = pulse_duration * 17150  # Speed of sound in cm/s (divided by 2)
    return distance

try:
    while True:
        distance = measure_distance()
        print(f"Distance: {distance} cm")

        if distance > 20:  # Adjust this threshold as needed
            forward()
        else:
            stop()
            # You can add logic here to turn left or right to navigate the maze

except KeyboardInterrupt:
    stop()
    GPIO.cleanup()
